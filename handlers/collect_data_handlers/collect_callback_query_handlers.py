from loader import bot
from config_data.config import CALENDAR, CALENDAR_CALLBACK
from telebot.types import CallbackQuery
from datetime import datetime
from states.travel_information import TravelInfoState
from utils.restart_and_cancel import cancel_search
from utils.summary_message import summary_message_handler
from keyboards.inline_keyboards.calendar import calendar_keyboard
from keyboards.reply_keyboards.default_keyboard import default_keyboard


@bot.callback_query_handler(func=lambda call: call.data not in ('TRY_AGAIN', 'CANCEL'),
                            state=TravelInfoState.location_type)
def get_location_type(callback: CallbackQuery) -> None:
    """
    –í—ã–±–æ—Ä –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–∏–ø–∞ –ª–æ–∫–∞—Ü–∏–∏ –∏ –∑–∞–ø—Ä–æ—Å —Å–∞–º–æ–π –ª–æ–∫–∞—Ü–∏–∏.

    :param callback: –û–±—ä–µ–∫—Ç CallBackQuery
    :type: CallbackQuery
    :return: None
    """

    if callback.data == 'TRANSPORT_GROUP':
        bot.send_message(callback.message.chat.id, '–ü–æ–Ω—è–ª! –ë—É–¥—É –∏—Å–∫–∞—Ç—å —Ä—è–¥–æ–º —Å –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–º –∏–ª–∏ –≤–æ–∫–∑–∞–ª–æ–º.')
        bot.send_message(callback.message.chat.id, '–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–∞–º –≥–æ—Ä–æ–¥ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞ –∏–ª–∏ –≤–æ–∫–∑–∞–ª–∞?',
                         reply_markup=default_keyboard())

    elif callback.data == 'LANDMARK_GROUP':
        bot.send_message(callback.message.chat.id, '–ü–æ–Ω—è–ª! –ë—É–¥—É –∏—Å–∫–∞—Ç—å —Ä—è–¥–æ–º —Å –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è–º–∏.')
        bot.send_message(callback.message.chat.id, '–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –≥–æ—Ä–æ–¥ –∏ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å, '
                                                   '—Ä—è–¥–æ–º —Å –∫–æ—Ç–æ—Ä–æ–π –Ω–∞–¥–æ –Ω–∞–π—Ç–∏ –æ—Ç–µ–ª—å?',
                         reply_markup=default_keyboard())

    elif callback.data == 'CITY':
        # bot.send_message(callback.message.chat.id, '–ü–æ–Ω—è–ª! –ë—É–¥—É –∏—Å–∫–∞—Ç—å –≤ –≥–æ—Ä–æ–¥–µ –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –∫–∞–∫–∏–º-—Ç–æ –º–µ—Å—Ç–∞–º.')
        bot.send_message(callback.message.chat.id, '–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –≥–æ—Ä–æ–¥:', reply_markup=default_keyboard())

    bot.set_state(callback.from_user.id, TravelInfoState.location, callback.message.chat.id)

    with bot.retrieve_data(callback.from_user.id, callback.message.chat.id) as data:
        data['location_type'] = callback.data

    bot.answer_callback_query(callback.id)


@bot.callback_query_handler(func=lambda call: call.data not in ('TRY_AGAIN', 'CANCEL'),
                            state=TravelInfoState.specify_location)
def get_specified_location(callback: CallbackQuery) -> None:
    """
    –í—ã–±–æ—Ä –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—Ç–æ—á–Ω—ë–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏ –∏ –∑–∞–ø—Ä–æ—Å –¥–∞—Ç—ã –∑–∞–µ–∑–¥–∞ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ.

    :param callback: –û–±—ä–µ–∫—Ç CallBackQuery
    :type: CallbackQuery
    :return: None
    """

    bot.set_state(callback.from_user.id, TravelInfoState.checkin_date, callback.message.chat.id)
    bot.send_message(callback.message.chat.id, '–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É, –∫–æ–≥–¥–∞ —Ç—ã –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –∑–∞—Å–µ–ª—è—Ç—å—Å—è?',
                     reply_markup=calendar_keyboard(CALENDAR, CALENDAR_CALLBACK))

    with bot.retrieve_data(callback.from_user.id, callback.message.chat.id) as data:
        location_list = callback.data.split('|')
        print(location_list)
        data['location'] = location_list[0]
        print(data['location'])
        data['location_id'] = location_list[1]
        print(data['location_id'])
    bot.answer_callback_query(callback.id)


@bot.callback_query_handler(func=lambda call: call.data not in ('TRY_AGAIN', 'CANCEL'),
                            state=TravelInfoState.checkin_date)
def get_checkin_date(callback: CallbackQuery) -> None:
    """
    –í—ã–±–æ—Ä –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã –∑–∞–µ–∑–¥–∞ –∏ –∑–∞–ø—Ä–æ—Å –¥–∞—Ç—ã –≤—ã–µ–∑–¥–∞ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ.

    :param callback: –û–±—ä–µ–∫—Ç CallBackQuery
    :type: CallbackQuery
    :return: None
    """

    name, action, year, month, day = callback.data.split(CALENDAR_CALLBACK.sep)
    date = CALENDAR.calendar_query_handler(bot=bot,
                                           call=callback,
                                           name=name,
                                           action=action,
                                           year=year,
                                           month=month,
                                           day=day)

    if action == 'DAY':

        if date < datetime.now():
            bot.send_message(callback.message.chat.id, '–î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!',
                             reply_markup=calendar_keyboard(CALENDAR, CALENDAR_CALLBACK))

        else:
            bot.send_message(callback.message.chat.id, f'–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞ –∑–∞–µ–∑–¥–∞: {date.strftime("%d-%m-%Y")}')
            bot.set_state(callback.from_user.id, TravelInfoState.checkout_date, callback.message.chat.id)
            bot.send_message(callback.message.chat.id, '–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É, –∫–æ–≥–¥–∞ —Ç—ã –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –≤—ã—Å–µ–ª—è—Ç—å—Å—è? üìÖ',
                             reply_markup=calendar_keyboard(CALENDAR, CALENDAR_CALLBACK))

            with bot.retrieve_data(callback.from_user.id, callback.message.chat.id) as data:
                data['checkin_date'] = date

    elif action == 'CANCEL':
        cancel_search(callback.from_user.id, callback.message.chat.id)

    bot.answer_callback_query(callback.id)


@bot.callback_query_handler(func=lambda call: call.data not in ('TRY_AGAIN', 'CANCEL'),
                            state=TravelInfoState.checkout_date)
def get_checkout_date(callback: CallbackQuery) -> None:
    """
    –í—ã–±–æ—Ä –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã –≤—ã–µ–∑–¥–∞. –ó–∞–ø—Ä–æ—Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–¥–∞—á–µ.

    :param callback: –û–±—ä–µ–∫—Ç CallBackQuery
    :type: CallbackQuery
    :return: None
    """

    name, action, year, month, day = callback.data.split(CALENDAR_CALLBACK.sep)
    date = CALENDAR.calendar_query_handler(bot=bot,
                                           call=callback,
                                           name=name,
                                           action=action,
                                           year=year,
                                           month=month,
                                           day=day)

    if action == 'DAY':

        with bot.retrieve_data(callback.from_user.id, callback.message.chat.id) as data:
            if date <= data['checkin_date']:
                bot.send_message(callback.message.chat.id,
                                 '–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –∑–∞–µ–∑–¥–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!',
                                 reply_markup=calendar_keyboard(CALENDAR, CALENDAR_CALLBACK))

            else:
                bot.send_message(callback.message.chat.id,
                                 f'–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞ –≤—ã–µ–∑–¥–∞: {date.strftime("%d-%m-%Y")}')

                data['checkout_date'] = date

                if data.get('command', None) == 'bestdeal':
                    bot.set_state(callback.from_user.id, TravelInfoState.min_price, callback.message.chat.id)
                    bot.send_message(callback.message.chat.id, '–ö–∞–∫–æ–π —Ç–≤–æ–π –Ω–∏–∂–Ω–∏–π –ø–æ—Ä–æ–≥ —Ü–µ–Ω—ã –∑–∞ –Ω–æ—á—å?',
                                     reply_markup=default_keyboard())

                else:
                    bot.set_state(callback.from_user.id, TravelInfoState.show_hotels, callback.message.chat.id)
                    summary_message_handler(data, callback.message.chat.id)

    elif action == 'CANCEL':
        cancel_search(callback.from_user.id, callback.message.chat.id)

        bot.answer_callback_query(callback.id)
