from loader import bot
from config_data.config import CALENDAR, CALENDAR_CALLBACK
from re import fullmatch
from telebot.types import Message
from states.travel_information import TravelInfoState
from handlers.API_handlers import request_location
from utils.restart_and_cancel import restart_search, cancel_search
from utils.summary_message import summary_message_handler
from keyboards.inline_keyboards.location_type import location_type_keyboard
from keyboards.inline_keyboards.specify_location import specify_location_keyboard
from keyboards.inline_keyboards.calendar import calendar_keyboard
from keyboards.reply_keyboards.default_keyboard import default_keyboard


@bot.message_handler(commands=['lowprice', 'highprice', 'bestdeal'])
def start_search(message: Message) -> None:
    """
    –ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã –∏ –∑–∞–ø—Ä–æ—Å —Ç–∏–ø–∞ –ª–æ–∫–∞—Ü–∏–∏ (–≥–æ—Ä–æ–¥, –≤–æ–∫–∑–∞–ª, –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å)

    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
    :type message: Message
    :return: None
    """

    if message.text == '/lowprice':
        first_message_text = '–ò—â–µ–º —Å–∞–º—ã–µ –¥–µ—à—ë–≤—ã–µ –æ—Ç–µ–ª–∏ üè¢'
    elif message.text == '/highprice':
        first_message_text = '–ò—â–µ–º —Å–∞–º—ã–µ –¥–æ—Ä–æ–≥–∏–µ –æ—Ç–µ–ª–∏ üè∞'
    else:
        first_message_text = '–ò—â–µ–º –æ—Ç–µ–ª–∏ –ø–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É üëÅ'

    bot.set_state(message.from_user.id, TravelInfoState.location_type, message.chat.id)

    bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}‚úå!\n{first_message_text}\n\n'
                                      f'–ì–¥–µ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å?',
                     reply_markup=location_type_keyboard())

    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data.clear()
        data['command'] = message.text[1:]


@bot.message_handler(state=TravelInfoState.location_type)
def location_type_echo(message: Message) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø –ª–æ–∫–∞—Ü–∏–∏ –∏–∑ —Å–ø–∏—Å–∫–∞.

    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
    :type message: Message
    :return: None
    """

    if not check_cancel_or_try_again(message):
        bot.send_message(message.chat.id, '–ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ ‚òù')


@bot.message_handler(state=TravelInfoState.location)
def get_location(message: Message) -> None:
    """
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏. –ï—Å–ª–∏ API –≤–µ—Ä–Ω—É–ª –Ω–µ—Å–∫–æ–ª—å–∫–æ –ª–æ–∫–∞—Ü–∏–π, –∑–∞–ø—Ä–æ—Å –Ω–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É, –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ–∏—Å–∫—É.

    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
    :type message: Message
    :return: None
    """

    if not check_cancel_or_try_again(message):

        if message.text.isdigit():
            bot.send_message(message.chat.id, '–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ –º–µ—Å—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä. '
                                              '–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!')
        else:
            with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                locations_response = request_location(data['location_type'], message.text)

            if locations_response:
                response_length = len(locations_response)

                if response_length > 1:
                    bot.set_state(message.from_user.id, TravelInfoState.specify_location, message.chat.id)
                    bot.send_message(message.chat.id,
                                     '–í–æ—Ç, —á—Ç–æ —è –Ω–∞—à—ë–ª! –í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±–µ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –ø–æ–¥—Ö–æ–¥–∏—Ç?',
                                     reply_markup=specify_location_keyboard(locations_response))

                elif response_length == 1:
                    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                        data['location'] = message.text
                        data['location_id'] = list(locations_response.values())[0]

                    bot.set_state(message.from_user.id, TravelInfoState.checkin_date, message.chat.id)
                    bot.send_message(message.chat.id,
                                     '–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É, –∫–æ–≥–¥–∞ —Ç—ã –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –∑–∞—Å–µ–ª—è—Ç—å—Å—è? üìÖ',
                                     reply_markup=calendar_keyboard(CALENDAR, CALENDAR_CALLBACK))

                else:
                    bot.send_message(message.chat.id,
                                     '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É —è –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à—ë–ª üòî\n –•–æ—á–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑?',
                                     reply_markup=default_keyboard())
            else:
                    bot.send_message(message.chat.id,
                                     'üòµ –£–ø—Å, –∫–∞–∂–µ—Ç—Å—è —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –ü–æ–ø—Ä–æ–±—É–π –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∏—Å–∫.',
                                     reply_markup=default_keyboard())


@bot.message_handler(state=TravelInfoState.specify_location)
def specify_location_echo(message: Message) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –≤—ã–±—Ä–∞—Ç—å –ª–æ–∫–∞—Ü–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞.

    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
    :type message: Message
    :return: None
    """

    if not check_cancel_or_try_again(message):
        bot.send_message(message.chat.id, '–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ —Å–∞–º—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç ‚òù')


@bot.message_handler(state=TravelInfoState.checkin_date)
def specify_location_echo(message: Message) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ.

    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
    :type message: Message
    :return: None
    """

    if not check_cancel_or_try_again(message):
        bot.send_message(message.chat.id, '–ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ ‚òù')


@bot.message_handler(state=TravelInfoState.checkout_date)
def specify_location_echo(message: Message) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ.

    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
    :type message: Message
    :return: None
    """

    if not check_cancel_or_try_again(message):
        bot.send_message(message.chat.id, '–ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ ‚òù')


@bot.message_handler(state=TravelInfoState.min_price)
def get_min_price(message: Message) -> None:
    """
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É.

    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
    :type message: Message
    :return: None
    """

    if not check_cancel_or_try_again(message):

        if message.text.isdigit():
            bot.set_state(message.from_user.id, TravelInfoState.max_price, message.chat.id)

            bot.send_message(message.chat.id, '–ö–∞–∫–æ–π —Ç–≤–æ–π –≤–µ—Ä—Ö–Ω–∏–π –ø–æ—Ä–æ–≥ —Ü–µ–Ω—ã –∑–∞ –Ω–æ—á—å?')

            with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                data['min_price'] = int(message.text)
        else:
            bot.send_message(message.chat.id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–∫–∞–∑–∞–Ω–∞ —Ü–µ–Ω–∞.\n '
                                              '–£–±–µ–¥–∏—Å—å, —á—Ç–æ –≤ —Ç–≤–æ—ë–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —Ç–æ–ª—å–∫–æ —Å—É–º–º–∞ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–∏–º–≤–æ–ª–æ–≤ –∏ '
                                              '–ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!')


@bot.message_handler(state=TravelInfoState.max_price)
def get_max_price(message: Message) -> None:
    """
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞.

    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
    :type message: Message
    :return: None
    """

    if not check_cancel_or_try_again(message):

        if message.text.isdigit():

            with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                if int(message.text) > data['min_price']:
                    bot.set_state(message.from_user.id, TravelInfoState.min_dist, message.chat.id)
                    bot.send_message(message.chat.id, '–ö–∞–∫–æ–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–≤ –∫–º) –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ —Ç–µ–±—è –±—ã —É—Å—Ç—Ä–æ–∏–ª–æ?'
                                                      '\n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —É–∫–∞–∑–∞—Ç—å –¥—Ä–æ–±–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –≤–≤–æ–¥–∏ –µ–≥–æ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É, '
                                                      '–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤.')
                    data['max_price'] = int(message.text)

                else:
                    bot.send_message(message.chat.id, '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã.\n '
                                                      '–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!')

        else:
            bot.send_message(message.chat.id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–∫–∞–∑–∞–Ω–∞ —Ü–µ–Ω–∞.\n '
                                              '–£–±–µ–¥–∏—Å—å, —á—Ç–æ –≤ —Ç–≤–æ—ë–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —Ç–æ–ª—å–∫–æ —Å—É–º–º–∞ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–∏–º–≤–æ–ª–æ–≤ –∏ '
                                              '–ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!')


@bot.message_handler(state=TravelInfoState.min_dist)
def get_min_dist(message: Message) -> None:
    """
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞.

    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
    :type message: Message
    :return: None
    """

    if not check_cancel_or_try_again(message):

        if fullmatch(r'^\d+\.?\d*$', message.text):

            bot.set_state(message.from_user.id, TravelInfoState.max_dist, message.chat.id)
            bot.send_message(message.chat.id, '–ö–∞–∫–æ–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–≤ –∫–º) –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ —Ç–µ–±—è –±—ã —É—Å—Ç—Ä–æ–∏–ª–æ?\n'
                                              '–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —É–∫–∞–∑–∞—Ç—å –¥—Ä–æ–±–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –≤–≤–æ–¥–∏ –µ–≥–æ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É, '
                                              '–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤.')

            with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                data['min_dist'] = float(message.text)

        else:
            bot.send_message(message.chat.id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–∫–∞–∑–∞–Ω–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ.\n '
                                              '–£–±–µ–¥–∏—Å—å, —á—Ç–æ –≤–≤—ë–ª —á–∏—Å–ª–æ –∏–ª–∏ –¥—Ä–æ–±–Ω–æ–µ —á–∏—Å–ª–æ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É, –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª '
                                              '–ø—Ä–æ–±–µ–ª–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!')


@bot.message_handler(state=TravelInfoState.max_dist)
def get_max_dist(message: Message) -> None:
    """
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞.

    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
    :type message: Message
    :return: None
    """

    if not check_cancel_or_try_again(message):

        if fullmatch(r'^\d+\.?\d*$', message.text):
            with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                if float(message.text) > data['min_dist']:
                    data['max_dist'] = float(message.text)
                    summary_message_handler(data, message.chat.id)
                    bot.set_state(message.from_user.id, TravelInfoState.show_hotels, message.chat.id)

                else:
                    bot.send_message(message.chat.id, '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ '
                                                      '–º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è.'
                                                      '\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!')
        else:
            bot.send_message(message.chat.id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–∫–∞–∑–∞–Ω–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ.\n '
                                              '–£–±–µ–¥–∏—Å—å, —á—Ç–æ –≤–≤—ë–ª —á–∏—Å–ª–æ –∏–ª–∏ –¥—Ä–æ–±–Ω–æ–µ —á–∏—Å–ª–æ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É, –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª '
                                              '–ø—Ä–æ–±–µ–ª–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!')


def check_cancel_or_try_again(message: Message) -> bool:
    """
    –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è. –í—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–º–µ–Ω—ã –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.

    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
    :type message: Message
    :return: bool
    """
    if message.text.lower() == '‚Ü©–Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞':
        restart_search(message.from_user.id, message.chat.id)
        return True

    elif message.text.lower() == 'üõë–ø—Ä–µ—Ä–≤–∞—Ç—å –ø–æ–∏—Å–∫':
        cancel_search(message.from_user.id, message.chat.id)
        return True

    return False
